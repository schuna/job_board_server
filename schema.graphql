type Query {
    users: [User!]!
    messages: [Message!]!
    expenses(filter: ExpenseFilterInput): [Expense!]!
    expense(id: Int!): Expense
}

input ExpenseFilterInput {
    unit: String
}

type Mutation {
    createUser(input: CreateUserInput!): User
    addMessage(input: MessageInput!): Message
    addExpense(input: AddExpenseInput!): Expense!
}


type Subscription {
    userAdded: User
    messageAdded: Message
}

type User {
    id: ID!
    email: String!
    password: String!
}

type Message {
    id: ID!
    from: String!
    text: String!
}

type Expense {
    id: Int!
    unit: String!
    amount: Float!
    description: String!
}


input CreateUserInput {
    email: String!,
    password: String!
}

input MessageInput {
    text: String!
}


input AddExpenseInput {
    unit: String!
    amount: Float!
    description: String!
}
